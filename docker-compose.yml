version: "3.8"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      # mongodb:
      #   condition: service_healthy
    links:
      - mysql
      - redis
      # - mongodb
    networks:
      - backend

  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "${MYSQL_PORT}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
    - mysql_data:/var/lib/mysql
    restart: on-failure
    networks:
      - backend


  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    restart: on-failure
    command: /bin/sh -c "redis-server --requirepass $${REDIS_PASSWORD}"
    networks:
      - backend

  # mongodb:
  #   image: mongo:latest
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
  #   ports:
  #     - "${MONGODB_PORT}:27017"
  #   healthcheck:
  #     test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   volumes:
  #     - mongodb_data:/data/db
  #   restart: on-failure
  #   networks:
  #     - backend


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./etc/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - web
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    networks:
      - backend

volumes:
  mysql_data:
  redis_data:
  # mongodb_data:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./prometheus_data
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./grafana_data

networks:
  backend:
    driver: bridge